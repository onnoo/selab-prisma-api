// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  account: (where?: AccountWhereInput) => Promise<boolean>;
  answer: (where?: AnswerWhereInput) => Promise<boolean>;
  course: (where?: CourseWhereInput) => Promise<boolean>;
  quiz: (where?: QuizWhereInput) => Promise<boolean>;
  quizContents: (where?: QuizContentsWhereInput) => Promise<boolean>;
  semester: (where?: SemesterWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  account: (where: AccountWhereUniqueInput) => AccountNullablePromise;
  accounts: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Account>;
  accountsConnection: (args?: {
    where?: AccountWhereInput;
    orderBy?: AccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AccountConnectionPromise;
  answer: (where: AnswerWhereUniqueInput) => AnswerNullablePromise;
  answers: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Answer>;
  answersConnection: (args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AnswerConnectionPromise;
  course: (where: CourseWhereUniqueInput) => CourseNullablePromise;
  courses: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Course>;
  coursesConnection: (args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CourseConnectionPromise;
  quiz: (where: QuizWhereUniqueInput) => QuizNullablePromise;
  quizzes: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Quiz>;
  quizzesConnection: (args?: {
    where?: QuizWhereInput;
    orderBy?: QuizOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuizConnectionPromise;
  quizContents: (
    where: QuizContentsWhereUniqueInput
  ) => QuizContentsNullablePromise;
  quizContentses: (args?: {
    where?: QuizContentsWhereInput;
    orderBy?: QuizContentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<QuizContents>;
  quizContentsesConnection: (args?: {
    where?: QuizContentsWhereInput;
    orderBy?: QuizContentsOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuizContentsConnectionPromise;
  semester: (where: SemesterWhereUniqueInput) => SemesterNullablePromise;
  semesters: (args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Semester>;
  semestersConnection: (args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SemesterConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAccount: (data: AccountCreateInput) => AccountPromise;
  updateAccount: (args: {
    data: AccountUpdateInput;
    where: AccountWhereUniqueInput;
  }) => AccountPromise;
  updateManyAccounts: (args: {
    data: AccountUpdateManyMutationInput;
    where?: AccountWhereInput;
  }) => BatchPayloadPromise;
  upsertAccount: (args: {
    where: AccountWhereUniqueInput;
    create: AccountCreateInput;
    update: AccountUpdateInput;
  }) => AccountPromise;
  deleteAccount: (where: AccountWhereUniqueInput) => AccountPromise;
  deleteManyAccounts: (where?: AccountWhereInput) => BatchPayloadPromise;
  createAnswer: (data: AnswerCreateInput) => AnswerPromise;
  updateAnswer: (args: {
    data: AnswerUpdateInput;
    where: AnswerWhereUniqueInput;
  }) => AnswerPromise;
  updateManyAnswers: (args: {
    data: AnswerUpdateManyMutationInput;
    where?: AnswerWhereInput;
  }) => BatchPayloadPromise;
  upsertAnswer: (args: {
    where: AnswerWhereUniqueInput;
    create: AnswerCreateInput;
    update: AnswerUpdateInput;
  }) => AnswerPromise;
  deleteAnswer: (where: AnswerWhereUniqueInput) => AnswerPromise;
  deleteManyAnswers: (where?: AnswerWhereInput) => BatchPayloadPromise;
  createCourse: (data: CourseCreateInput) => CoursePromise;
  updateCourse: (args: {
    data: CourseUpdateInput;
    where: CourseWhereUniqueInput;
  }) => CoursePromise;
  updateManyCourses: (args: {
    data: CourseUpdateManyMutationInput;
    where?: CourseWhereInput;
  }) => BatchPayloadPromise;
  upsertCourse: (args: {
    where: CourseWhereUniqueInput;
    create: CourseCreateInput;
    update: CourseUpdateInput;
  }) => CoursePromise;
  deleteCourse: (where: CourseWhereUniqueInput) => CoursePromise;
  deleteManyCourses: (where?: CourseWhereInput) => BatchPayloadPromise;
  createQuiz: (data: QuizCreateInput) => QuizPromise;
  updateQuiz: (args: {
    data: QuizUpdateInput;
    where: QuizWhereUniqueInput;
  }) => QuizPromise;
  updateManyQuizzes: (args: {
    data: QuizUpdateManyMutationInput;
    where?: QuizWhereInput;
  }) => BatchPayloadPromise;
  upsertQuiz: (args: {
    where: QuizWhereUniqueInput;
    create: QuizCreateInput;
    update: QuizUpdateInput;
  }) => QuizPromise;
  deleteQuiz: (where: QuizWhereUniqueInput) => QuizPromise;
  deleteManyQuizzes: (where?: QuizWhereInput) => BatchPayloadPromise;
  createQuizContents: (data: QuizContentsCreateInput) => QuizContentsPromise;
  updateQuizContents: (args: {
    data: QuizContentsUpdateInput;
    where: QuizContentsWhereUniqueInput;
  }) => QuizContentsPromise;
  updateManyQuizContentses: (args: {
    data: QuizContentsUpdateManyMutationInput;
    where?: QuizContentsWhereInput;
  }) => BatchPayloadPromise;
  upsertQuizContents: (args: {
    where: QuizContentsWhereUniqueInput;
    create: QuizContentsCreateInput;
    update: QuizContentsUpdateInput;
  }) => QuizContentsPromise;
  deleteQuizContents: (
    where: QuizContentsWhereUniqueInput
  ) => QuizContentsPromise;
  deleteManyQuizContentses: (
    where?: QuizContentsWhereInput
  ) => BatchPayloadPromise;
  createSemester: (data: SemesterCreateInput) => SemesterPromise;
  updateSemester: (args: {
    data: SemesterUpdateInput;
    where: SemesterWhereUniqueInput;
  }) => SemesterPromise;
  updateManySemesters: (args: {
    data: SemesterUpdateManyMutationInput;
    where?: SemesterWhereInput;
  }) => BatchPayloadPromise;
  upsertSemester: (args: {
    where: SemesterWhereUniqueInput;
    create: SemesterCreateInput;
    update: SemesterUpdateInput;
  }) => SemesterPromise;
  deleteSemester: (where: SemesterWhereUniqueInput) => SemesterPromise;
  deleteManySemesters: (where?: SemesterWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  account: (
    where?: AccountSubscriptionWhereInput
  ) => AccountSubscriptionPayloadSubscription;
  answer: (
    where?: AnswerSubscriptionWhereInput
  ) => AnswerSubscriptionPayloadSubscription;
  course: (
    where?: CourseSubscriptionWhereInput
  ) => CourseSubscriptionPayloadSubscription;
  quiz: (
    where?: QuizSubscriptionWhereInput
  ) => QuizSubscriptionPayloadSubscription;
  quizContents: (
    where?: QuizContentsSubscriptionWhereInput
  ) => QuizContentsSubscriptionPayloadSubscription;
  semester: (
    where?: SemesterSubscriptionWhereInput
  ) => SemesterSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Permission = "ADMIN" | "TA" | "STUDENT";

export type AccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_id_ASC"
  | "user_id_DESC"
  | "user_pwd_ASC"
  | "user_pwd_DESC"
  | "permission_ASC"
  | "permission_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type SemesterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "semester_ASC"
  | "semester_DESC";

export type CourseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "degree_ASC"
  | "degree_DESC";

export type QuizType = "CHOICE" | "ESSAY";

export type AnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type QuizOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type QuizContentsOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AccountWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  user_id?: Maybe<String>;
}>;

export interface AccountWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user_id?: Maybe<String>;
  user_id_not?: Maybe<String>;
  user_id_in?: Maybe<String[] | String>;
  user_id_not_in?: Maybe<String[] | String>;
  user_id_lt?: Maybe<String>;
  user_id_lte?: Maybe<String>;
  user_id_gt?: Maybe<String>;
  user_id_gte?: Maybe<String>;
  user_id_contains?: Maybe<String>;
  user_id_not_contains?: Maybe<String>;
  user_id_starts_with?: Maybe<String>;
  user_id_not_starts_with?: Maybe<String>;
  user_id_ends_with?: Maybe<String>;
  user_id_not_ends_with?: Maybe<String>;
  user_pwd?: Maybe<String>;
  user_pwd_not?: Maybe<String>;
  user_pwd_in?: Maybe<String[] | String>;
  user_pwd_not_in?: Maybe<String[] | String>;
  user_pwd_lt?: Maybe<String>;
  user_pwd_lte?: Maybe<String>;
  user_pwd_gt?: Maybe<String>;
  user_pwd_gte?: Maybe<String>;
  user_pwd_contains?: Maybe<String>;
  user_pwd_not_contains?: Maybe<String>;
  user_pwd_starts_with?: Maybe<String>;
  user_pwd_not_starts_with?: Maybe<String>;
  user_pwd_ends_with?: Maybe<String>;
  user_pwd_not_ends_with?: Maybe<String>;
  permission?: Maybe<Permission>;
  permission_not?: Maybe<Permission>;
  permission_in?: Maybe<Permission[] | Permission>;
  permission_not_in?: Maybe<Permission[] | Permission>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  OR?: Maybe<AccountWhereInput[] | AccountWhereInput>;
  NOT?: Maybe<AccountWhereInput[] | AccountWhereInput>;
}

export type AnswerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SemesterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  semester?: Maybe<String>;
  semester_not?: Maybe<String>;
  semester_in?: Maybe<String[] | String>;
  semester_not_in?: Maybe<String[] | String>;
  semester_lt?: Maybe<String>;
  semester_lte?: Maybe<String>;
  semester_gt?: Maybe<String>;
  semester_gte?: Maybe<String>;
  semester_contains?: Maybe<String>;
  semester_not_contains?: Maybe<String>;
  semester_starts_with?: Maybe<String>;
  semester_not_starts_with?: Maybe<String>;
  semester_ends_with?: Maybe<String>;
  semester_not_ends_with?: Maybe<String>;
  courses_every?: Maybe<CourseWhereInput>;
  courses_some?: Maybe<CourseWhereInput>;
  courses_none?: Maybe<CourseWhereInput>;
  AND?: Maybe<SemesterWhereInput[] | SemesterWhereInput>;
  OR?: Maybe<SemesterWhereInput[] | SemesterWhereInput>;
  NOT?: Maybe<SemesterWhereInput[] | SemesterWhereInput>;
}

export interface CourseWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  semesters_every?: Maybe<SemesterWhereInput>;
  semesters_some?: Maybe<SemesterWhereInput>;
  semesters_none?: Maybe<SemesterWhereInput>;
  degree?: Maybe<String>;
  degree_not?: Maybe<String>;
  degree_in?: Maybe<String[] | String>;
  degree_not_in?: Maybe<String[] | String>;
  degree_lt?: Maybe<String>;
  degree_lte?: Maybe<String>;
  degree_gt?: Maybe<String>;
  degree_gte?: Maybe<String>;
  degree_contains?: Maybe<String>;
  degree_not_contains?: Maybe<String>;
  degree_starts_with?: Maybe<String>;
  degree_not_starts_with?: Maybe<String>;
  degree_ends_with?: Maybe<String>;
  degree_not_ends_with?: Maybe<String>;
  AND?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  OR?: Maybe<CourseWhereInput[] | CourseWhereInput>;
  NOT?: Maybe<CourseWhereInput[] | CourseWhereInput>;
}

export interface AnswerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quiz?: Maybe<QuizWhereInput>;
  user?: Maybe<AccountWhereInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  OR?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
  NOT?: Maybe<AnswerWhereInput[] | AnswerWhereInput>;
}

export interface QuizWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  course?: Maybe<CourseWhereInput>;
  semester?: Maybe<SemesterWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  content?: Maybe<QuizContentsWhereInput>;
  answers_every?: Maybe<AnswerWhereInput>;
  answers_some?: Maybe<AnswerWhereInput>;
  answers_none?: Maybe<AnswerWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<AccountWhereInput>;
  AND?: Maybe<QuizWhereInput[] | QuizWhereInput>;
  OR?: Maybe<QuizWhereInput[] | QuizWhereInput>;
  NOT?: Maybe<QuizWhereInput[] | QuizWhereInput>;
}

export interface QuizContentsWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<QuizType>;
  type_not?: Maybe<QuizType>;
  type_in?: Maybe<QuizType[] | QuizType>;
  type_not_in?: Maybe<QuizType[] | QuizType>;
  AND?: Maybe<QuizContentsWhereInput[] | QuizContentsWhereInput>;
  OR?: Maybe<QuizContentsWhereInput[] | QuizContentsWhereInput>;
  NOT?: Maybe<QuizContentsWhereInput[] | QuizContentsWhereInput>;
}

export type CourseWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type QuizWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QuizContentsWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SemesterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  semester?: Maybe<String>;
}>;

export interface AccountCreateInput {
  id?: Maybe<ID_Input>;
  user_id: String;
  user_pwd: String;
  permission: Permission;
}

export interface AccountUpdateInput {
  user_id?: Maybe<String>;
  user_pwd?: Maybe<String>;
  permission?: Maybe<Permission>;
}

export interface AccountUpdateManyMutationInput {
  user_id?: Maybe<String>;
  user_pwd?: Maybe<String>;
  permission?: Maybe<Permission>;
}

export interface AnswerCreateInput {
  id?: Maybe<ID_Input>;
  quiz: QuizCreateOneWithoutAnswersInput;
  user: AccountCreateOneInput;
  content: String;
}

export interface QuizCreateOneWithoutAnswersInput {
  create?: Maybe<QuizCreateWithoutAnswersInput>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizCreateWithoutAnswersInput {
  id?: Maybe<ID_Input>;
  course: CourseCreateOneInput;
  semester: SemesterCreateOneInput;
  title: String;
  description: String;
  content: QuizContentsCreateOneInput;
  createdBy: AccountCreateOneInput;
}

export interface CourseCreateOneInput {
  create?: Maybe<CourseCreateInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  name: String;
  semesters?: Maybe<SemesterCreateManyWithoutCoursesInput>;
  degree: String;
}

export interface SemesterCreateManyWithoutCoursesInput {
  create?: Maybe<
    SemesterCreateWithoutCoursesInput[] | SemesterCreateWithoutCoursesInput
  >;
  connect?: Maybe<SemesterWhereUniqueInput[] | SemesterWhereUniqueInput>;
}

export interface SemesterCreateWithoutCoursesInput {
  id?: Maybe<ID_Input>;
  semester: String;
}

export interface SemesterCreateOneInput {
  create?: Maybe<SemesterCreateInput>;
  connect?: Maybe<SemesterWhereUniqueInput>;
}

export interface SemesterCreateInput {
  id?: Maybe<ID_Input>;
  semester: String;
  courses?: Maybe<CourseCreateManyWithoutSemestersInput>;
}

export interface CourseCreateManyWithoutSemestersInput {
  create?: Maybe<
    CourseCreateWithoutSemestersInput[] | CourseCreateWithoutSemestersInput
  >;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
}

export interface CourseCreateWithoutSemestersInput {
  id?: Maybe<ID_Input>;
  code: String;
  name: String;
  degree: String;
}

export interface QuizContentsCreateOneInput {
  create?: Maybe<QuizContentsCreateInput>;
  connect?: Maybe<QuizContentsWhereUniqueInput>;
}

export interface QuizContentsCreateInput {
  id?: Maybe<ID_Input>;
  type: QuizType;
  options?: Maybe<QuizContentsCreateoptionsInput>;
}

export interface QuizContentsCreateoptionsInput {
  set?: Maybe<String[] | String>;
}

export interface AccountCreateOneInput {
  create?: Maybe<AccountCreateInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AnswerUpdateInput {
  quiz?: Maybe<QuizUpdateOneRequiredWithoutAnswersInput>;
  user?: Maybe<AccountUpdateOneRequiredInput>;
  content?: Maybe<String>;
}

export interface QuizUpdateOneRequiredWithoutAnswersInput {
  create?: Maybe<QuizCreateWithoutAnswersInput>;
  update?: Maybe<QuizUpdateWithoutAnswersDataInput>;
  upsert?: Maybe<QuizUpsertWithoutAnswersInput>;
  connect?: Maybe<QuizWhereUniqueInput>;
}

export interface QuizUpdateWithoutAnswersDataInput {
  course?: Maybe<CourseUpdateOneRequiredInput>;
  semester?: Maybe<SemesterUpdateOneRequiredInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  content?: Maybe<QuizContentsUpdateOneRequiredInput>;
  createdBy?: Maybe<AccountUpdateOneRequiredInput>;
}

export interface CourseUpdateOneRequiredInput {
  create?: Maybe<CourseCreateInput>;
  update?: Maybe<CourseUpdateDataInput>;
  upsert?: Maybe<CourseUpsertNestedInput>;
  connect?: Maybe<CourseWhereUniqueInput>;
}

export interface CourseUpdateDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  semesters?: Maybe<SemesterUpdateManyWithoutCoursesInput>;
  degree?: Maybe<String>;
}

export interface SemesterUpdateManyWithoutCoursesInput {
  create?: Maybe<
    SemesterCreateWithoutCoursesInput[] | SemesterCreateWithoutCoursesInput
  >;
  delete?: Maybe<SemesterWhereUniqueInput[] | SemesterWhereUniqueInput>;
  connect?: Maybe<SemesterWhereUniqueInput[] | SemesterWhereUniqueInput>;
  set?: Maybe<SemesterWhereUniqueInput[] | SemesterWhereUniqueInput>;
  disconnect?: Maybe<SemesterWhereUniqueInput[] | SemesterWhereUniqueInput>;
  update?: Maybe<
    | SemesterUpdateWithWhereUniqueWithoutCoursesInput[]
    | SemesterUpdateWithWhereUniqueWithoutCoursesInput
  >;
  upsert?: Maybe<
    | SemesterUpsertWithWhereUniqueWithoutCoursesInput[]
    | SemesterUpsertWithWhereUniqueWithoutCoursesInput
  >;
  deleteMany?: Maybe<SemesterScalarWhereInput[] | SemesterScalarWhereInput>;
  updateMany?: Maybe<
    | SemesterUpdateManyWithWhereNestedInput[]
    | SemesterUpdateManyWithWhereNestedInput
  >;
}

export interface SemesterUpdateWithWhereUniqueWithoutCoursesInput {
  where: SemesterWhereUniqueInput;
  data: SemesterUpdateWithoutCoursesDataInput;
}

export interface SemesterUpdateWithoutCoursesDataInput {
  semester?: Maybe<String>;
}

export interface SemesterUpsertWithWhereUniqueWithoutCoursesInput {
  where: SemesterWhereUniqueInput;
  update: SemesterUpdateWithoutCoursesDataInput;
  create: SemesterCreateWithoutCoursesInput;
}

export interface SemesterScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  semester?: Maybe<String>;
  semester_not?: Maybe<String>;
  semester_in?: Maybe<String[] | String>;
  semester_not_in?: Maybe<String[] | String>;
  semester_lt?: Maybe<String>;
  semester_lte?: Maybe<String>;
  semester_gt?: Maybe<String>;
  semester_gte?: Maybe<String>;
  semester_contains?: Maybe<String>;
  semester_not_contains?: Maybe<String>;
  semester_starts_with?: Maybe<String>;
  semester_not_starts_with?: Maybe<String>;
  semester_ends_with?: Maybe<String>;
  semester_not_ends_with?: Maybe<String>;
  AND?: Maybe<SemesterScalarWhereInput[] | SemesterScalarWhereInput>;
  OR?: Maybe<SemesterScalarWhereInput[] | SemesterScalarWhereInput>;
  NOT?: Maybe<SemesterScalarWhereInput[] | SemesterScalarWhereInput>;
}

export interface SemesterUpdateManyWithWhereNestedInput {
  where: SemesterScalarWhereInput;
  data: SemesterUpdateManyDataInput;
}

export interface SemesterUpdateManyDataInput {
  semester?: Maybe<String>;
}

export interface CourseUpsertNestedInput {
  update: CourseUpdateDataInput;
  create: CourseCreateInput;
}

export interface SemesterUpdateOneRequiredInput {
  create?: Maybe<SemesterCreateInput>;
  update?: Maybe<SemesterUpdateDataInput>;
  upsert?: Maybe<SemesterUpsertNestedInput>;
  connect?: Maybe<SemesterWhereUniqueInput>;
}

export interface SemesterUpdateDataInput {
  semester?: Maybe<String>;
  courses?: Maybe<CourseUpdateManyWithoutSemestersInput>;
}

export interface CourseUpdateManyWithoutSemestersInput {
  create?: Maybe<
    CourseCreateWithoutSemestersInput[] | CourseCreateWithoutSemestersInput
  >;
  delete?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  connect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  set?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  disconnect?: Maybe<CourseWhereUniqueInput[] | CourseWhereUniqueInput>;
  update?: Maybe<
    | CourseUpdateWithWhereUniqueWithoutSemestersInput[]
    | CourseUpdateWithWhereUniqueWithoutSemestersInput
  >;
  upsert?: Maybe<
    | CourseUpsertWithWhereUniqueWithoutSemestersInput[]
    | CourseUpsertWithWhereUniqueWithoutSemestersInput
  >;
  deleteMany?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  updateMany?: Maybe<
    | CourseUpdateManyWithWhereNestedInput[]
    | CourseUpdateManyWithWhereNestedInput
  >;
}

export interface CourseUpdateWithWhereUniqueWithoutSemestersInput {
  where: CourseWhereUniqueInput;
  data: CourseUpdateWithoutSemestersDataInput;
}

export interface CourseUpdateWithoutSemestersDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  degree?: Maybe<String>;
}

export interface CourseUpsertWithWhereUniqueWithoutSemestersInput {
  where: CourseWhereUniqueInput;
  update: CourseUpdateWithoutSemestersDataInput;
  create: CourseCreateWithoutSemestersInput;
}

export interface CourseScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  degree?: Maybe<String>;
  degree_not?: Maybe<String>;
  degree_in?: Maybe<String[] | String>;
  degree_not_in?: Maybe<String[] | String>;
  degree_lt?: Maybe<String>;
  degree_lte?: Maybe<String>;
  degree_gt?: Maybe<String>;
  degree_gte?: Maybe<String>;
  degree_contains?: Maybe<String>;
  degree_not_contains?: Maybe<String>;
  degree_starts_with?: Maybe<String>;
  degree_not_starts_with?: Maybe<String>;
  degree_ends_with?: Maybe<String>;
  degree_not_ends_with?: Maybe<String>;
  AND?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  OR?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
  NOT?: Maybe<CourseScalarWhereInput[] | CourseScalarWhereInput>;
}

export interface CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput;
  data: CourseUpdateManyDataInput;
}

export interface CourseUpdateManyDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  degree?: Maybe<String>;
}

export interface SemesterUpsertNestedInput {
  update: SemesterUpdateDataInput;
  create: SemesterCreateInput;
}

export interface QuizContentsUpdateOneRequiredInput {
  create?: Maybe<QuizContentsCreateInput>;
  update?: Maybe<QuizContentsUpdateDataInput>;
  upsert?: Maybe<QuizContentsUpsertNestedInput>;
  connect?: Maybe<QuizContentsWhereUniqueInput>;
}

export interface QuizContentsUpdateDataInput {
  type?: Maybe<QuizType>;
  options?: Maybe<QuizContentsUpdateoptionsInput>;
}

export interface QuizContentsUpdateoptionsInput {
  set?: Maybe<String[] | String>;
}

export interface QuizContentsUpsertNestedInput {
  update: QuizContentsUpdateDataInput;
  create: QuizContentsCreateInput;
}

export interface AccountUpdateOneRequiredInput {
  create?: Maybe<AccountCreateInput>;
  update?: Maybe<AccountUpdateDataInput>;
  upsert?: Maybe<AccountUpsertNestedInput>;
  connect?: Maybe<AccountWhereUniqueInput>;
}

export interface AccountUpdateDataInput {
  user_id?: Maybe<String>;
  user_pwd?: Maybe<String>;
  permission?: Maybe<Permission>;
}

export interface AccountUpsertNestedInput {
  update: AccountUpdateDataInput;
  create: AccountCreateInput;
}

export interface QuizUpsertWithoutAnswersInput {
  update: QuizUpdateWithoutAnswersDataInput;
  create: QuizCreateWithoutAnswersInput;
}

export interface AnswerUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface CourseUpdateInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  semesters?: Maybe<SemesterUpdateManyWithoutCoursesInput>;
  degree?: Maybe<String>;
}

export interface CourseUpdateManyMutationInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  degree?: Maybe<String>;
}

export interface QuizCreateInput {
  id?: Maybe<ID_Input>;
  course: CourseCreateOneInput;
  semester: SemesterCreateOneInput;
  title: String;
  description: String;
  content: QuizContentsCreateOneInput;
  answers?: Maybe<AnswerCreateManyWithoutQuizInput>;
  createdBy: AccountCreateOneInput;
}

export interface AnswerCreateManyWithoutQuizInput {
  create?: Maybe<AnswerCreateWithoutQuizInput[] | AnswerCreateWithoutQuizInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
}

export interface AnswerCreateWithoutQuizInput {
  id?: Maybe<ID_Input>;
  user: AccountCreateOneInput;
  content: String;
}

export interface QuizUpdateInput {
  course?: Maybe<CourseUpdateOneRequiredInput>;
  semester?: Maybe<SemesterUpdateOneRequiredInput>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  content?: Maybe<QuizContentsUpdateOneRequiredInput>;
  answers?: Maybe<AnswerUpdateManyWithoutQuizInput>;
  createdBy?: Maybe<AccountUpdateOneRequiredInput>;
}

export interface AnswerUpdateManyWithoutQuizInput {
  create?: Maybe<AnswerCreateWithoutQuizInput[] | AnswerCreateWithoutQuizInput>;
  delete?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  connect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  set?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  disconnect?: Maybe<AnswerWhereUniqueInput[] | AnswerWhereUniqueInput>;
  update?: Maybe<
    | AnswerUpdateWithWhereUniqueWithoutQuizInput[]
    | AnswerUpdateWithWhereUniqueWithoutQuizInput
  >;
  upsert?: Maybe<
    | AnswerUpsertWithWhereUniqueWithoutQuizInput[]
    | AnswerUpsertWithWhereUniqueWithoutQuizInput
  >;
  deleteMany?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  updateMany?: Maybe<
    | AnswerUpdateManyWithWhereNestedInput[]
    | AnswerUpdateManyWithWhereNestedInput
  >;
}

export interface AnswerUpdateWithWhereUniqueWithoutQuizInput {
  where: AnswerWhereUniqueInput;
  data: AnswerUpdateWithoutQuizDataInput;
}

export interface AnswerUpdateWithoutQuizDataInput {
  user?: Maybe<AccountUpdateOneRequiredInput>;
  content?: Maybe<String>;
}

export interface AnswerUpsertWithWhereUniqueWithoutQuizInput {
  where: AnswerWhereUniqueInput;
  update: AnswerUpdateWithoutQuizDataInput;
  create: AnswerCreateWithoutQuizInput;
}

export interface AnswerScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  OR?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
  NOT?: Maybe<AnswerScalarWhereInput[] | AnswerScalarWhereInput>;
}

export interface AnswerUpdateManyWithWhereNestedInput {
  where: AnswerScalarWhereInput;
  data: AnswerUpdateManyDataInput;
}

export interface AnswerUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface QuizUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface QuizContentsUpdateInput {
  type?: Maybe<QuizType>;
  options?: Maybe<QuizContentsUpdateoptionsInput>;
}

export interface QuizContentsUpdateManyMutationInput {
  type?: Maybe<QuizType>;
  options?: Maybe<QuizContentsUpdateoptionsInput>;
}

export interface SemesterUpdateInput {
  semester?: Maybe<String>;
  courses?: Maybe<CourseUpdateManyWithoutSemestersInput>;
}

export interface SemesterUpdateManyMutationInput {
  semester?: Maybe<String>;
}

export interface AccountSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AccountWhereInput>;
  AND?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  OR?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
  NOT?: Maybe<AccountSubscriptionWhereInput[] | AccountSubscriptionWhereInput>;
}

export interface AnswerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AnswerWhereInput>;
  AND?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  OR?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
  NOT?: Maybe<AnswerSubscriptionWhereInput[] | AnswerSubscriptionWhereInput>;
}

export interface CourseSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CourseWhereInput>;
  AND?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  OR?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
  NOT?: Maybe<CourseSubscriptionWhereInput[] | CourseSubscriptionWhereInput>;
}

export interface QuizSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuizWhereInput>;
  AND?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
  OR?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
  NOT?: Maybe<QuizSubscriptionWhereInput[] | QuizSubscriptionWhereInput>;
}

export interface QuizContentsSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuizContentsWhereInput>;
  AND?: Maybe<
    QuizContentsSubscriptionWhereInput[] | QuizContentsSubscriptionWhereInput
  >;
  OR?: Maybe<
    QuizContentsSubscriptionWhereInput[] | QuizContentsSubscriptionWhereInput
  >;
  NOT?: Maybe<
    QuizContentsSubscriptionWhereInput[] | QuizContentsSubscriptionWhereInput
  >;
}

export interface SemesterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SemesterWhereInput>;
  AND?: Maybe<
    SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput
  >;
  OR?: Maybe<SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput>;
  NOT?: Maybe<
    SemesterSubscriptionWhereInput[] | SemesterSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Account {
  id: ID_Output;
  user_id: String;
  user_pwd: String;
  permission: Permission;
  createdAt: DateTimeOutput;
}

export interface AccountPromise extends Promise<Account>, Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  user_pwd: () => Promise<String>;
  permission: () => Promise<Permission>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AccountSubscription
  extends Promise<AsyncIterator<Account>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  user_pwd: () => Promise<AsyncIterator<String>>;
  permission: () => Promise<AsyncIterator<Permission>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AccountNullablePromise
  extends Promise<Account | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  user_pwd: () => Promise<String>;
  permission: () => Promise<Permission>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AccountConnection {
  pageInfo: PageInfo;
  edges: AccountEdge[];
}

export interface AccountConnectionPromise
  extends Promise<AccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AccountEdge>>() => T;
  aggregate: <T = AggregateAccountPromise>() => T;
}

export interface AccountConnectionSubscription
  extends Promise<AsyncIterator<AccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AccountEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAccountSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AccountEdge {
  node: Account;
  cursor: String;
}

export interface AccountEdgePromise extends Promise<AccountEdge>, Fragmentable {
  node: <T = AccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AccountEdgeSubscription
  extends Promise<AsyncIterator<AccountEdge>>,
    Fragmentable {
  node: <T = AccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAccount {
  count: Int;
}

export interface AggregateAccountPromise
  extends Promise<AggregateAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAccountSubscription
  extends Promise<AsyncIterator<AggregateAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Answer {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
}

export interface AnswerPromise extends Promise<Answer>, Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = QuizPromise>() => T;
  user: <T = AccountPromise>() => T;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AnswerSubscription
  extends Promise<AsyncIterator<Answer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quiz: <T = QuizSubscription>() => T;
  user: <T = AccountSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AnswerNullablePromise
  extends Promise<Answer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quiz: <T = QuizPromise>() => T;
  user: <T = AccountPromise>() => T;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface Quiz {
  id: ID_Output;
  title: String;
  description: String;
  createdAt: DateTimeOutput;
}

export interface QuizPromise extends Promise<Quiz>, Fragmentable {
  id: () => Promise<ID_Output>;
  course: <T = CoursePromise>() => T;
  semester: <T = SemesterPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  content: <T = QuizContentsPromise>() => T;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = AccountPromise>() => T;
}

export interface QuizSubscription
  extends Promise<AsyncIterator<Quiz>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  course: <T = CourseSubscription>() => T;
  semester: <T = SemesterSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  content: <T = QuizContentsSubscription>() => T;
  answers: <T = Promise<AsyncIterator<AnswerSubscription>>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = AccountSubscription>() => T;
}

export interface QuizNullablePromise
  extends Promise<Quiz | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  course: <T = CoursePromise>() => T;
  semester: <T = SemesterPromise>() => T;
  title: () => Promise<String>;
  description: () => Promise<String>;
  content: <T = QuizContentsPromise>() => T;
  answers: <T = FragmentableArray<Answer>>(args?: {
    where?: AnswerWhereInput;
    orderBy?: AnswerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = AccountPromise>() => T;
}

export interface Course {
  id: ID_Output;
  code: String;
  name: String;
  degree: String;
}

export interface CoursePromise extends Promise<Course>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  semesters: <T = FragmentableArray<Semester>>(args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  degree: () => Promise<String>;
}

export interface CourseSubscription
  extends Promise<AsyncIterator<Course>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  semesters: <T = Promise<AsyncIterator<SemesterSubscription>>>(args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  degree: () => Promise<AsyncIterator<String>>;
}

export interface CourseNullablePromise
  extends Promise<Course | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  semesters: <T = FragmentableArray<Semester>>(args?: {
    where?: SemesterWhereInput;
    orderBy?: SemesterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  degree: () => Promise<String>;
}

export interface Semester {
  id: ID_Output;
  semester: String;
}

export interface SemesterPromise extends Promise<Semester>, Fragmentable {
  id: () => Promise<ID_Output>;
  semester: () => Promise<String>;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SemesterSubscription
  extends Promise<AsyncIterator<Semester>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  semester: () => Promise<AsyncIterator<String>>;
  courses: <T = Promise<AsyncIterator<CourseSubscription>>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SemesterNullablePromise
  extends Promise<Semester | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  semester: () => Promise<String>;
  courses: <T = FragmentableArray<Course>>(args?: {
    where?: CourseWhereInput;
    orderBy?: CourseOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface QuizContents {
  id: ID_Output;
  type: QuizType;
  options: String[];
}

export interface QuizContentsPromise
  extends Promise<QuizContents>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<QuizType>;
  options: () => Promise<String[]>;
}

export interface QuizContentsSubscription
  extends Promise<AsyncIterator<QuizContents>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<QuizType>>;
  options: () => Promise<AsyncIterator<String[]>>;
}

export interface QuizContentsNullablePromise
  extends Promise<QuizContents | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<QuizType>;
  options: () => Promise<String[]>;
}

export interface AnswerConnection {
  pageInfo: PageInfo;
  edges: AnswerEdge[];
}

export interface AnswerConnectionPromise
  extends Promise<AnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerEdge>>() => T;
  aggregate: <T = AggregateAnswerPromise>() => T;
}

export interface AnswerConnectionSubscription
  extends Promise<AsyncIterator<AnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerSubscription>() => T;
}

export interface AnswerEdge {
  node: Answer;
  cursor: String;
}

export interface AnswerEdgePromise extends Promise<AnswerEdge>, Fragmentable {
  node: <T = AnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerEdgeSubscription
  extends Promise<AsyncIterator<AnswerEdge>>,
    Fragmentable {
  node: <T = AnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswer {
  count: Int;
}

export interface AggregateAnswerPromise
  extends Promise<AggregateAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerSubscription
  extends Promise<AsyncIterator<AggregateAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CourseConnection {
  pageInfo: PageInfo;
  edges: CourseEdge[];
}

export interface CourseConnectionPromise
  extends Promise<CourseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CourseEdge>>() => T;
  aggregate: <T = AggregateCoursePromise>() => T;
}

export interface CourseConnectionSubscription
  extends Promise<AsyncIterator<CourseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CourseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCourseSubscription>() => T;
}

export interface CourseEdge {
  node: Course;
  cursor: String;
}

export interface CourseEdgePromise extends Promise<CourseEdge>, Fragmentable {
  node: <T = CoursePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CourseEdgeSubscription
  extends Promise<AsyncIterator<CourseEdge>>,
    Fragmentable {
  node: <T = CourseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCourse {
  count: Int;
}

export interface AggregateCoursePromise
  extends Promise<AggregateCourse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCourseSubscription
  extends Promise<AsyncIterator<AggregateCourse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuizConnection {
  pageInfo: PageInfo;
  edges: QuizEdge[];
}

export interface QuizConnectionPromise
  extends Promise<QuizConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuizEdge>>() => T;
  aggregate: <T = AggregateQuizPromise>() => T;
}

export interface QuizConnectionSubscription
  extends Promise<AsyncIterator<QuizConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuizEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuizSubscription>() => T;
}

export interface QuizEdge {
  node: Quiz;
  cursor: String;
}

export interface QuizEdgePromise extends Promise<QuizEdge>, Fragmentable {
  node: <T = QuizPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuizEdgeSubscription
  extends Promise<AsyncIterator<QuizEdge>>,
    Fragmentable {
  node: <T = QuizSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuiz {
  count: Int;
}

export interface AggregateQuizPromise
  extends Promise<AggregateQuiz>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuizSubscription
  extends Promise<AsyncIterator<AggregateQuiz>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface QuizContentsConnection {
  pageInfo: PageInfo;
  edges: QuizContentsEdge[];
}

export interface QuizContentsConnectionPromise
  extends Promise<QuizContentsConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuizContentsEdge>>() => T;
  aggregate: <T = AggregateQuizContentsPromise>() => T;
}

export interface QuizContentsConnectionSubscription
  extends Promise<AsyncIterator<QuizContentsConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuizContentsEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuizContentsSubscription>() => T;
}

export interface QuizContentsEdge {
  node: QuizContents;
  cursor: String;
}

export interface QuizContentsEdgePromise
  extends Promise<QuizContentsEdge>,
    Fragmentable {
  node: <T = QuizContentsPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuizContentsEdgeSubscription
  extends Promise<AsyncIterator<QuizContentsEdge>>,
    Fragmentable {
  node: <T = QuizContentsSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuizContents {
  count: Int;
}

export interface AggregateQuizContentsPromise
  extends Promise<AggregateQuizContents>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuizContentsSubscription
  extends Promise<AsyncIterator<AggregateQuizContents>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SemesterConnection {
  pageInfo: PageInfo;
  edges: SemesterEdge[];
}

export interface SemesterConnectionPromise
  extends Promise<SemesterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SemesterEdge>>() => T;
  aggregate: <T = AggregateSemesterPromise>() => T;
}

export interface SemesterConnectionSubscription
  extends Promise<AsyncIterator<SemesterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SemesterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSemesterSubscription>() => T;
}

export interface SemesterEdge {
  node: Semester;
  cursor: String;
}

export interface SemesterEdgePromise
  extends Promise<SemesterEdge>,
    Fragmentable {
  node: <T = SemesterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SemesterEdgeSubscription
  extends Promise<AsyncIterator<SemesterEdge>>,
    Fragmentable {
  node: <T = SemesterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSemester {
  count: Int;
}

export interface AggregateSemesterPromise
  extends Promise<AggregateSemester>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSemesterSubscription
  extends Promise<AsyncIterator<AggregateSemester>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AccountSubscriptionPayload {
  mutation: MutationType;
  node: Account;
  updatedFields: String[];
  previousValues: AccountPreviousValues;
}

export interface AccountSubscriptionPayloadPromise
  extends Promise<AccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AccountPreviousValuesPromise>() => T;
}

export interface AccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AccountPreviousValuesSubscription>() => T;
}

export interface AccountPreviousValues {
  id: ID_Output;
  user_id: String;
  user_pwd: String;
  permission: Permission;
  createdAt: DateTimeOutput;
}

export interface AccountPreviousValuesPromise
  extends Promise<AccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_id: () => Promise<String>;
  user_pwd: () => Promise<String>;
  permission: () => Promise<Permission>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AccountPreviousValuesSubscription
  extends Promise<AsyncIterator<AccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_id: () => Promise<AsyncIterator<String>>;
  user_pwd: () => Promise<AsyncIterator<String>>;
  permission: () => Promise<AsyncIterator<Permission>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AnswerSubscriptionPayload {
  mutation: MutationType;
  node: Answer;
  updatedFields: String[];
  previousValues: AnswerPreviousValues;
}

export interface AnswerSubscriptionPayloadPromise
  extends Promise<AnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerPreviousValuesPromise>() => T;
}

export interface AnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerPreviousValuesSubscription>() => T;
}

export interface AnswerPreviousValues {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
}

export interface AnswerPreviousValuesPromise
  extends Promise<AnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CourseSubscriptionPayload {
  mutation: MutationType;
  node: Course;
  updatedFields: String[];
  previousValues: CoursePreviousValues;
}

export interface CourseSubscriptionPayloadPromise
  extends Promise<CourseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CoursePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CoursePreviousValuesPromise>() => T;
}

export interface CourseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CourseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CourseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CoursePreviousValuesSubscription>() => T;
}

export interface CoursePreviousValues {
  id: ID_Output;
  code: String;
  name: String;
  degree: String;
}

export interface CoursePreviousValuesPromise
  extends Promise<CoursePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  degree: () => Promise<String>;
}

export interface CoursePreviousValuesSubscription
  extends Promise<AsyncIterator<CoursePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  degree: () => Promise<AsyncIterator<String>>;
}

export interface QuizSubscriptionPayload {
  mutation: MutationType;
  node: Quiz;
  updatedFields: String[];
  previousValues: QuizPreviousValues;
}

export interface QuizSubscriptionPayloadPromise
  extends Promise<QuizSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuizPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuizPreviousValuesPromise>() => T;
}

export interface QuizSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuizSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuizSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuizPreviousValuesSubscription>() => T;
}

export interface QuizPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  createdAt: DateTimeOutput;
}

export interface QuizPreviousValuesPromise
  extends Promise<QuizPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface QuizPreviousValuesSubscription
  extends Promise<AsyncIterator<QuizPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface QuizContentsSubscriptionPayload {
  mutation: MutationType;
  node: QuizContents;
  updatedFields: String[];
  previousValues: QuizContentsPreviousValues;
}

export interface QuizContentsSubscriptionPayloadPromise
  extends Promise<QuizContentsSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuizContentsPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuizContentsPreviousValuesPromise>() => T;
}

export interface QuizContentsSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuizContentsSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuizContentsSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuizContentsPreviousValuesSubscription>() => T;
}

export interface QuizContentsPreviousValues {
  id: ID_Output;
  type: QuizType;
  options: String[];
}

export interface QuizContentsPreviousValuesPromise
  extends Promise<QuizContentsPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<QuizType>;
  options: () => Promise<String[]>;
}

export interface QuizContentsPreviousValuesSubscription
  extends Promise<AsyncIterator<QuizContentsPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<QuizType>>;
  options: () => Promise<AsyncIterator<String[]>>;
}

export interface SemesterSubscriptionPayload {
  mutation: MutationType;
  node: Semester;
  updatedFields: String[];
  previousValues: SemesterPreviousValues;
}

export interface SemesterSubscriptionPayloadPromise
  extends Promise<SemesterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SemesterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SemesterPreviousValuesPromise>() => T;
}

export interface SemesterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SemesterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SemesterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SemesterPreviousValuesSubscription>() => T;
}

export interface SemesterPreviousValues {
  id: ID_Output;
  semester: String;
}

export interface SemesterPreviousValuesPromise
  extends Promise<SemesterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  semester: () => Promise<String>;
}

export interface SemesterPreviousValuesSubscription
  extends Promise<AsyncIterator<SemesterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  semester: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Course",
    embedded: false
  },
  {
    name: "Semester",
    embedded: false
  },
  {
    name: "QuizType",
    embedded: false
  },
  {
    name: "Permission",
    embedded: false
  },
  {
    name: "QuizContents",
    embedded: false
  },
  {
    name: "Account",
    embedded: false
  },
  {
    name: "Answer",
    embedded: false
  },
  {
    name: "Quiz",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
